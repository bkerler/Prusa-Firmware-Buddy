From aa82dd91dbb56a6356d66b3905c9b347bfdd1517 Mon Sep 17 00:00:00 2001
From: David Strobach <lalochcz@gmail.com>
Date: Mon, 3 Oct 2022 17:38:28 +0000
Subject: [PATCH] Move UART ISR to IRAM

---
 components/esp8266/driver/uart.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/components/esp8266/driver/uart.c b/components/esp8266/driver/uart.c
index ae067dd0..0598156f 100644
--- a/components/esp8266/driver/uart.c
+++ b/components/esp8266/driver/uart.c
@@ -414,7 +414,7 @@ esp_err_t uart_enable_tx_intr(uart_port_t uart_num, int enable, int thresh)
     return ESP_OK;
 }

-static void uart_intr_service(void *arg)
+static void IRAM_ATTR uart_intr_service(void *arg)
 {
     // UART intr process
     uint32_t uart_num = 0;
@@ -518,7 +518,7 @@ esp_err_t uart_intr_config(uart_port_t uart_num,  uart_intr_config_t *intr_conf)
 }

 // internal isr handler for default driver code.
-static void uart_rx_intr_handler_default(void *param)
+static void IRAM_ATTR uart_rx_intr_handler_default(void *param)
 {
     uart_obj_t *p_uart = (uart_obj_t *) param;
     uint8_t uart_num = p_uart->uart_num;
@@ -713,7 +713,7 @@ static void uart_rx_intr_handler_default(void *param)

 // Fill UART tx_fifo and return a number,
 // This function by itself is not thread-safe, always call from within a muxed section.
-static int uart_fill_fifo(uart_port_t uart_num, const char *buffer, uint32_t len)
+static int IRAM_ATTR uart_fill_fifo(uart_port_t uart_num, const char *buffer, uint32_t len)
 {
     uint8_t i = 0;
     uint8_t tx_fifo_cnt = UART[uart_num]->status.txfifo_cnt;
@@ -743,7 +743,7 @@ int uart_tx_chars(uart_port_t uart_num, const char *buffer, uint32_t len)
     return tx_len;
 }

-static int uart_tx_all(uart_port_t uart_num, const char *src, size_t size)
+static int IRAM_ATTR uart_tx_all(uart_port_t uart_num, const char *src, size_t size)
 {
     if (size == 0) {
         return 0;
@@ -792,7 +792,7 @@ static int uart_tx_all(uart_port_t uart_num, const char *src, size_t size)
     return original_size;
 }

-int uart_write_bytes(uart_port_t uart_num, const char *src, size_t size)
+int IRAM_ATTR uart_write_bytes(uart_port_t uart_num, const char *src, size_t size)
 {
     UART_CHECK((uart_num < UART_NUM_MAX), "uart_num error", (-1));
     UART_CHECK((p_uart_obj[uart_num]), "uart driver error", (-1));
@@ -801,7 +801,7 @@ int uart_write_bytes(uart_port_t uart_num, const char *src, size_t size)
     return uart_tx_all(uart_num, src, size);
 }

-int uart_read_bytes(uart_port_t uart_num, uint8_t *buf, uint32_t length, TickType_t ticks_to_wait)
+int IRAM_ATTR uart_read_bytes(uart_port_t uart_num, uint8_t *buf, uint32_t length, TickType_t ticks_to_wait)
 {
     UART_CHECK((uart_num < UART_NUM_MAX), "uart_num error", (-1));
     UART_CHECK((buf), "uart data null", (-1));
--
2.34.1
